syntax = "proto3";


// Service API definition.
service MyService {

  // Similar to a normal function call.
  rpc LikeAFunction(Point) returns (Point) {}

  // A response-streaming RPC where the client sends a request to the server
  // and gets a stream to read a sequence of messages back. The client reads
  // from the returned stream until there are no more messages.
  rpc GetResponseStream(Nested) returns (stream Point) {}

  // A request-streaming RPC where the client writes a sequence of messages
  // and sends them to the server, again using a provided stream. Once the
  // client has finished writing the messages, it waits for the server to read
  // them all and return its response.
  rpc SendRequestStream(stream Point) returns (Point) {}

  // A bidirectionally-streaming RPC where both sides send a sequence of
  // messages using a read-write stream. The two streams operate
  // independently, so clients and servers can read and write in whatever
  // order they like: for example, the server could wait to receive all the
  // client messages before writing its responses, or it could alternately
  // read a message then write a message, or some other combination of reads
  // and writes. The order of messages in each stream is preserved.
  rpc BidirectionalStream(stream Point) returns (stream Point) {}

 }

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 x = 1;
  int32 y = 2;
}


// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Nested {
  // Ima docstring.
  Point one = 1;

  // Some docstring.
  Point other = 2;
}
